from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from .. import schemas, crud, models, database, auth

router = APIRouter(prefix="/contracts", tags=["contracts"])

@router.post("/", response_model=schemas.ContractResponse)
def create_contract(contract: schemas.ContractCreate, db: Session = Depends(database.get_db), current_user: models.User = Depends(auth.get_current_user)):
    if current_user.role != models.RoleEnum.client:
        raise HTTPException(status_code=403, detail="Only clients can create contracts")
    return crud.create_contract(db, client_id=current_user.id, contract=contract)

@router.get("/", response_model=List[schemas.ContractResponse])
def list_contracts(db: Session = Depends(database.get_db), current_user: models.User = Depends(auth.get_current_user)):
    return crud.get_contracts_by_user(db, user_id=current_user.id)

@router.patch("/{contract_id}/status", response_model=schemas.ContractResponse)
def update_contract_status(contract_id: int, status: models.ContractStatus, db: Session = Depends(database.get_db), current_user: models.User = Depends(auth.get_current_user)):
    contract = crud.get_contract(db, contract_id)
    if not contract:
        raise HTTPException(status_code=404, detail="Contract not found")
    if contract.client_id != current_user.id and contract.freelancer_id != current_user.id:
        raise HTTPException(status_code=403, detail="Not authorized to update this contract")
    return crud.update_contract_status(db, contract_id, status)
